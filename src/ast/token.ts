let tokens = {
  Abstract: 0,
  As: 1,
  Async: 2,
  Await: 3,
  Break: 4,
  Case: 5,
  Catch: 6,
  Class: 7,
  Const: 8,
  Continue: 9,
  Constructor: 10,
  Debugger: 11,
  Declare: 12,
  Default: 13,
  Delete: 14,
  Do: 15,
  Else: 16,
  Enum: 17,
  Export: 18,
  Extends: 19,
  False: 20,
  Finally: 21,
  For: 22,
  From: 23,
  Function: 24,
  Get: 25,
  If: 26,
  Implements: 27,
  Import: 28,
  In: 29,
  InstanceOf: 30,
  Interface: 31,
  Is: 32,
  KeyOf: 33,
  Let: 34,
  Module: 35,
  Namespace: 36,
  New: 37,
  Null: 38,
  Of: 39,
  Override: 40,
  Package: 41,
  Private: 42,
  Protected: 43,
  Public: 44,
  Readonly: 45,
  Return: 46,
  Set: 47,
  Static: 48,
  Super: 49,
  Switch: 50,
  This: 51,
  Throw: 52,
  True: 53,
  Try: 54,
  Type: 55,
  TypeOf: 56,
  Var: 57,
  Void: 58,
  While: 59,
  With: 60,
  Yield: 61,
  OpenBrace: 62,
  CloseBrace: 63,
  OpenParen: 64,
  CloseParen: 65,
  OpenBracket: 66,
  CloseBracket: 67,
  Dot: 68,
  Dot_Dot_Dot: 69,
  Semicolon: 70,
  Comma: 71,
  LessThan: 72,
  GreaterThan: 73,
  LessThan_Equals: 74,
  GreaterThan_Equals: 75,
  Equals_Equals: 76,
  Exclamation_Equals: 77,
  Equals_Equals_Equals: 78,
  Exclamation_Equals_Equals: 79,
  Equals_GreaterThan: 80,
  Plus: 81,
  Minus: 82,
  Asterisk_Asterisk: 83,
  Asterisk: 84,
  Slash: 85,
  Percent: 86,
  Plus_Plus: 87,
  Minus_Minus: 88,
  LessThan_LessThan: 89,
  GreaterThan_GreaterThan: 90,
  GreaterThan_GreaterThan_GreaterThan: 91,
  Ampersand: 92,
  Bar: 93,
  Caret: 94,
  Exclamation: 95,
  Tilde: 96,
  Ampersand_Ampersand: 97,
  Bar_Bar: 98,
  Question: 99,
  Colon: 100,
  Equals: 101,
  Plus_Equals: 102,
  Minus_Equals: 103,
  Asterisk_Equals: 104,
  Asterisk_Asterisk_Equals: 105,
  Slash_Equals: 106,
  Percent_Equals: 107,
  LessThan_LessThan_Equals: 108,
  GreaterThan_GreaterThan_Equals: 109,
  GreaterThan_GreaterThan_GreaterThan_Equals: 110,
  Ampersand_Equals: 111,
  Bar_Equals: 112,
  Caret_Equals: 113,
  At: 114,
  Identifier: 115,
  StringLiteral: 116,
  IntegerLiteral: 117,
  FloatLiteral: 118,
  TemplateLiteral: 119,
  Invalid: 120,
  EndOfFile: 121,
};

function buildTokensdMap(): ReadonlyMap<Number, String> {
  let result = new Map<Number, String>();
  Object.keys(tokens).forEach((name) => {
    // @ts-ignore
    let code = tokens[name];

    result.set(code, name);
  });
  return result;
}

export const TOKENS_MAP = buildTokensdMap();
